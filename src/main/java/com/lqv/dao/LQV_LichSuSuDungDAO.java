package com.lqv.dao;

import com.lqv.models.LQV_LichSuSuDung;
import com.lqv.utils.DBConnection;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class LQV_LichSuSuDungDAO {

    public List<LQV_LichSuSuDung> getAll() {
        List<LQV_LichSuSuDung> list = new ArrayList<>();
        String query = "SELECT * FROM LQV_LichSuSuDung";
        System.out.println("[DEBUG] B·∫Øt ƒë·∫ßu truy v·∫•n danh s√°ch l·ªãch s·ª≠ s·ª≠ d·ª•ng...");

        try (Connection conn = DBConnection.getConnection()) {
            if (conn == null) {
                System.out.println("[ERROR] Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn CSDL!");
                return list;
            }
            System.out.println("[DEBUG] K·∫øt n·ªëi CSDL th√†nh c√¥ng.");

            try (PreparedStatement stmt = conn.prepareStatement(query);
                 ResultSet rs = stmt.executeQuery()) {
                while (rs.next()) {
                    LQV_LichSuSuDung lichSu = mapResultSetToLichSu(rs);
                    list.add(lichSu);
                    System.out.println("[DEBUG] D·ªØ li·ªáu l·∫•y ƒë∆∞·ª£c: " + lichSu);
                }
            }
        } catch (SQLException e) {
            System.out.println("[ERROR] L·ªói khi truy v·∫•n d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
        }

        System.out.println("[DEBUG] T·ªïng s·ªë b·∫£n ghi l·∫•y ƒë∆∞·ª£c: " + list.size());
        return list;
    }

    public LQV_LichSuSuDung getById(int id) {
        String query = "SELECT * FROM LQV_LichSuSuDung WHERE LQVid = ?";
        System.out.println("üîç [DEBUG] ID ƒë∆∞·ª£c truy·ªÅn v√†o getById: " + id);

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return mapResultSetToLichSu(rs);
                }
            }
        } catch (SQLException e) {
            System.out.println("[ERROR] L·ªói truy v·∫•n getById: " + e.getMessage());
            e.printStackTrace();
        }
        return null;
    }

    public boolean insert(LQV_LichSuSuDung lichSu) {
        String query = "INSERT INTO LQV_LichSuSuDung (LQVid_vat_tu, LQVid_khach_hang, LQV_ngay_su_dung, LQV_so_luong_su_dung, LQV_ghi_chu) VALUES (?, ?, ?, ?, ?)";
        System.out.println("[DEBUG] B·∫Øt ƒë·∫ßu th√™m l·ªãch s·ª≠ s·ª≠ d·ª•ng: " + lichSu);
        
        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            
            if (lichSu == null) {
                System.out.println("[ERROR] ƒê·ªëi t∆∞·ª£ng lichSu l√† null!");
                return false;
            }
            
            stmt.setInt(1, lichSu.getLQVid_vat_tu());
            stmt.setInt(2, lichSu.getLQVid_khach_hang());
            stmt.setDate(3, new java.sql.Date(lichSu.getLQV_ngay_su_dung().getTime()));
            stmt.setInt(4, lichSu.getLQV_so_luong_su_dung());
            stmt.setString(5, lichSu.getLQV_ghi_chu());
            
            int rows = stmt.executeUpdate();
            System.out.println("[DEBUG] S·ªë b·∫£n ghi th√™m v√†o: " + rows);
            return rows > 0;
        } catch (SQLException e) {
            System.out.println("[ERROR] L·ªói khi th√™m l·ªãch s·ª≠ s·ª≠ d·ª•ng: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    public boolean update(LQV_LichSuSuDung lichSu) {
        String query = "UPDATE LQV_LichSuSuDung SET LQVid_vat_tu = ?, LQVid_khach_hang = ?, LQV_ngay_su_dung = ?, LQV_so_luong_su_dung = ?, LQV_ghi_chu = ? WHERE LQVid = ?";
        System.out.println("[DEBUG] ƒêang c·∫≠p nh·∫≠t l·ªãch s·ª≠ s·ª≠ d·ª•ng v·ªõi ID: " + lichSu.getLQVid());

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, lichSu.getLQVid_vat_tu());
            stmt.setInt(2, lichSu.getLQVid_khach_hang());
            stmt.setDate(3, new java.sql.Date(lichSu.getLQV_ngay_su_dung().getTime()));
            stmt.setInt(4, lichSu.getLQV_so_luong_su_dung());
            stmt.setString(5, lichSu.getLQV_ghi_chu());
            stmt.setInt(6, lichSu.getLQVid());

            int rows = stmt.executeUpdate();
            System.out.println("[DEBUG] S·ªë d√≤ng b·ªã ·∫£nh h∆∞·ªüng: " + rows);
            return rows > 0;
        } catch (SQLException e) {
            System.out.println("[ERROR] L·ªói khi c·∫≠p nh·∫≠t d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    public boolean delete(int id) {
        String query = "DELETE FROM LQV_LichSuSuDung WHERE LQVid = ?";
        System.out.println("[DEBUG] X√≥a l·ªãch s·ª≠ s·ª≠ d·ª•ng v·ªõi ID: " + id);

        try (Connection conn = DBConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, id);
            int rows = stmt.executeUpdate();
            System.out.println("[DEBUG] S·ªë b·∫£n ghi b·ªã x√≥a: " + rows);
            return rows > 0;
        } catch (SQLException e) {
            System.out.println("[ERROR] L·ªói khi x√≥a d·ªØ li·ªáu: " + e.getMessage());
            e.printStackTrace();
        }
        return false;
    }

    private LQV_LichSuSuDung mapResultSetToLichSu(ResultSet rs) throws SQLException {
        System.out.println("[DEBUG] Mapping d·ªØ li·ªáu t·ª´ ResultSet...");
        
        int id = rs.getInt("LQVid");
        if (rs.wasNull()) id = -1; // ƒê·∫∑t -1 thay v√¨ 0 ƒë·ªÉ d·ªÖ debug

        int vatTuId = rs.getInt("LQVid_vat_tu");
        int khachHangId = rs.getInt("LQVid_khach_hang");
        String nguoiSuDung = rs.getString("LQV_nguoi_su_dung");
        Date ngaySuDung = rs.getDate("LQV_ngay_su_dung");
        int soLuong = rs.getInt("LQV_so_luong_su_dung");
        String ghiChu = rs.getString("LQV_ghi_chu");
        
        return new LQV_LichSuSuDung(id, vatTuId, khachHangId, nguoiSuDung, ngaySuDung, soLuong, ghiChu);
    }
}
