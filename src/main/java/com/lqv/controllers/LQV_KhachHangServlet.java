package com.lqv.controllers;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import com.lqv.dao.LQV_KhachHangDAO;
import com.lqv.models.LQV_KhachHang;

@WebServlet("/khachhang")
public class LQV_KhachHangServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private LQV_KhachHangDAO khachHangDAO;
    
    @Override
    public void init() throws ServletException {
        khachHangDAO = new LQV_KhachHangDAO();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setContentType("text/html; charset=UTF-8");
        
        String action = request.getParameter("action");
        if (action == null) {
            action = "list";
        }
        try {
            switch (action) {
                case "new":
                    showNewForm(request, response);
                    break;
                case "edit":
                    showEditForm(request, response);
                    break;
                case "delete":
                    deleteKhachHang(request, response);
                    break;
                case "logout":
                    logout(request, response);
                    break;
                default:
                    listKhachHang(request, response);
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "L·ªói x·ª≠ l√Ω y√™u c·∫ßu");
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.setCharacterEncoding("UTF-8");
        response.setContentType("text/html; charset=UTF-8");

        String action = request.getParameter("action");
        try {
            switch (action) {
                case "insert":
                    insertKhachHang(request, response);
                    break;
                case "update":
                    updateKhachHang(request, response);
                    break;
                case "login":
                    login(request, response);
                    break;
                case "register":
                    register(request, response);
                    break;
                default:
                    response.sendRedirect("khachhang");
                    break;
            }
        } catch (Exception e) {
            e.printStackTrace();
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "L·ªói x·ª≠ l√Ω y√™u c·∫ßu");
        }
    }

    private void login(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // L·∫•y th√¥ng tin t√†i kho·∫£n v√† m·∫≠t kh·∫©u t·ª´ form
        String taiKhoan = request.getParameter("taiKhoan");
        String matKhau = request.getParameter("matKhau");

        // Ki·ªÉm tra n·∫øu t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u r·ªóng
        if (taiKhoan == null || matKhau == null || taiKhoan.trim().isEmpty() || matKhau.trim().isEmpty()) {
            System.out.println("‚ö†Ô∏è T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u b·ªã b·ªè tr·ªëng!");
            request.setAttribute("error", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√†i kho·∫£n v√† m·∫≠t kh·∫©u!");
            request.getRequestDispatcher("views/login-user.jsp").forward(request, response);
            return;
        }

        // Debug: In ra console ƒë·ªÉ ki·ªÉm tra th√¥ng tin nh·∫≠p v√†o
        System.out.println("üìå ƒêang ƒëƒÉng nh·∫≠p v·ªõi: T√†i kho·∫£n = " + taiKhoan + " | M·∫≠t kh·∫©u = " + matKhau);

        // S·ª≠ d·ª•ng DAO cho kh√°ch h√†ng thay v√¨ qu·∫£n tr·ªã vi√™n
        LQV_KhachHang khachHang = khachHangDAO.login(taiKhoan, matKhau);
        
        // Debug: Ki·ªÉm tra xem kh√°ch h√†ng c√≥ t·ªìn t·∫°i kh√¥ng
        if (khachHang != null) {
            System.out.println("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng! T√†i kho·∫£n: " + khachHang.getLQV_tai_khoan());
            HttpSession session = request.getSession();
            session.setAttribute("user", khachHang); // L∆∞u th√¥ng tin kh√°ch h√†ng v√†o session

            // Debug: Ki·ªÉm tra xem session c√≥ l∆∞u ƒë√∫ng th√¥ng tin kh√¥ng
            System.out.println("üìå ƒê√£ l∆∞u th√¥ng tin v√†o session: " + session.getAttribute("user"));

            // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang c·ªßa kh√°ch h√†ng
            System.out.println("üìå Tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng...");
            response.sendRedirect(request.getContextPath() + "/views/user.jsp");
            System.out.println("üìå Sau khi chuy·ªÉn h∆∞·ªõng...");



        } else {
            System.out.println("‚ùå ƒêƒÉng nh·∫≠p th·∫•t b·∫°i! Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u.");
            request.setAttribute("error", "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!");
            
            // Debug: Hi·ªÉn th·ªã l·∫°i th√¥ng b√°o l·ªói tr√™n trang login
            System.out.println("‚ö†Ô∏è L·ªói: Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!");
            
            request.getRequestDispatcher("views/login-user.jsp").forward(request, response);
        }
        return;
    }



    // ‚úÖ ƒêƒÉng k√Ω (M·ªöI)
    private void register(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        // L·∫•y d·ªØ li·ªáu t·ª´ form
        String taiKhoan = request.getParameter("tai_khoan");
        String matKhau = request.getParameter("mat_khau");
        String hoTen = request.getParameter("ho_ten");
        String email = request.getParameter("email");
        String diaChi = request.getParameter("dia_chi");
        String soDienThoai = request.getParameter("so_dien_thoai");

        // Ki·ªÉm tra t√†i kho·∫£n ho·∫∑c email ƒë√£ t·ªìn t·∫°i
        if (khachHangDAO.isEmailExist(email)) {
            request.setAttribute("error", "Email ƒë√£ t·ªìn t·∫°i.");
            request.getRequestDispatcher("views/register.jsp").forward(request, response);
            return;
        }

        // T·∫°o ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng
        LQV_KhachHang khachHang = new LQV_KhachHang(0, taiKhoan, matKhau, hoTen, email, diaChi, soDienThoai, true, new Date(), null);

        // G·ªçi DAO ƒë·ªÉ ƒëƒÉng k√Ω
        if (khachHangDAO.register(khachHang)) {
            System.out.println("‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng!");
            response.sendRedirect("views/auth/login.jsp"); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang ƒëƒÉng nh·∫≠p
        } else {
            request.setAttribute("error", "ƒêƒÉng k√Ω th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
            request.getRequestDispatcher("views/auth/register.jsp").forward(request, response);
        }
    }

    private void logout(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        HttpSession session = request.getSession();
        session.invalidate();
        System.out.println("‚úÖ ƒê√£ ƒëƒÉng xu·∫•t!");
        response.sendRedirect("views/auth/login.jsp");
    }

    private void listKhachHang(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        List<LQV_KhachHang> list = khachHangDAO.getAll();
        request.setAttribute("listKhachHang", list);
        request.getRequestDispatcher("views/quantrivien/pages/khachhang/list.jsp").forward(request, response);
    }

    private void showNewForm(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        request.getRequestDispatcher("views/quantrivien/pages/khachhang/form.jsp").forward(request, response);
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        LQV_KhachHang khachHang = khachHangDAO.getById(id);
        
        if (khachHang == null) {
            response.sendRedirect("khachhang");
            return;
        }
        
        request.setAttribute("khachHang", khachHang);
        request.getRequestDispatcher("views/quantrivien/pages/khachhang/edit.jsp").forward(request, response);
    }


    private void insertKhachHang(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            System.out.println("üîπ B·∫Øt ƒë·∫ßu th√™m kh√°ch h√†ng...");

            // Nh·∫≠n d·ªØ li·ªáu t·ª´ request
            String taiKhoan = request.getParameter("tai_khoan");
            String matKhau = request.getParameter("mat_khau");
            String hoTen = request.getParameter("ho_ten");
            String email = request.getParameter("email");
            String diaChi = request.getParameter("dia_chi");
            String soDienThoai = request.getParameter("so_dien_thoai");
            String trangThaiStr = request.getParameter("trang_thai");

            // Ki·ªÉm tra null ƒë·ªÉ tr√°nh l·ªói
            boolean trangThai = (trangThaiStr != null) && trangThaiStr.equals("true");

            // Debug th√¥ng tin nh·∫≠n ƒë∆∞·ª£c
            System.out.println("üîπ Nh·∫≠n ƒë∆∞·ª£c t·ª´ request:");
            System.out.println("- T√†i kho·∫£n: " + taiKhoan);
            System.out.println("- M·∫≠t kh·∫©u: " + matKhau);
            System.out.println("- H·ªç t√™n: " + hoTen);
            System.out.println("- Email: " + email);
            System.out.println("- ƒê·ªãa ch·ªâ: " + diaChi);
            System.out.println("- S·ªë ƒëi·ªán tho·∫°i: " + soDienThoai);
            System.out.println("- Tr·∫°ng th√°i: " + trangThai);

            // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
            if (taiKhoan == null || taiKhoan.trim().isEmpty()) {
                request.setAttribute("error", "T√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                request.getRequestDispatcher("them_khachhang.jsp").forward(request, response);
                return;
            }
            if (matKhau == null || matKhau.trim().isEmpty()) {
                request.setAttribute("error", "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                request.getRequestDispatcher("them_khachhang.jsp").forward(request, response);
                return;
            }
            if (hoTen == null || hoTen.trim().isEmpty()) {
                request.setAttribute("error", "H·ªç t√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                request.getRequestDispatcher("them_khachhang.jsp").forward(request, response);
                return;
            }
            if (email == null || email.trim().isEmpty() || !email.contains("@")) {
                request.setAttribute("error", "Email kh√¥ng h·ª£p l·ªá.");
                request.getRequestDispatcher("them_khachhang.jsp").forward(request, response);
                return;
            }
            if (soDienThoai == null || soDienThoai.trim().isEmpty()) {
                request.setAttribute("error", "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
                request.getRequestDispatcher("them_khachhang.jsp").forward(request, response);
                return;
            }

            // T·∫°o ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng
            LQV_KhachHang kh = new LQV_KhachHang(0, taiKhoan, matKhau, hoTen, email, diaChi, soDienThoai, trangThai, new Date(System.currentTimeMillis()), null);

            // Debug tr∆∞·ªõc khi insert
            System.out.println("=== Debug ƒë·ªëi t∆∞·ª£ng kh√°ch h√†ng tr∆∞·ªõc khi insert ===");
            System.out.println(kh);

            // G·ªçi DAO ƒë·ªÉ th√™m kh√°ch h√†ng v√†o c∆° s·ªü d·ªØ li·ªáu
            boolean isInserted = khachHangDAO.insertKhachHang(kh);
            if (isInserted) {
                System.out.println("‚úÖ Th√™m kh√°ch h√†ng th√†nh c√¥ng!");
                response.sendRedirect("khachhang");
            } else {
                request.setAttribute("error", "C√≥ l·ªói x·∫£y ra khi th√™m kh√°ch h√†ng.");
                request.getRequestDispatcher("them_khachhang.jsp").forward(request, response);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("‚ùå L·ªói khi th√™m kh√°ch h√†ng: " + e.getMessage());
            request.setAttribute("error", "L·ªói khi th√™m kh√°ch h√†ng: " + e.getMessage());
            request.getRequestDispatcher("them_khachhang.jsp").forward(request, response);
        }
    }



    private void updateKhachHang(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        try {
            // L·∫•y ID t·ª´ request
            String idStr = request.getParameter("LQVid");
            if (idStr == null || idStr.trim().isEmpty()) {
                System.out.println("‚ùå L·ªói: ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá! (null ho·∫∑c r·ªóng)");
                response.getWriter().println("L·ªói: ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá!");
                return;
            }

            int id;
            try {
                id = Integer.parseInt(idStr);
            } catch (NumberFormatException e) {
                System.out.println("‚ùå L·ªói: ID kh√°ch h√†ng kh√¥ng ph·∫£i s·ªë h·ª£p l·ªá!");
                response.getWriter().println("L·ªói: ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá!");
                return;
            }

            // Debug ID
            System.out.println("üîπ ID kh√°ch h√†ng: " + id);

            // L·∫•y th√¥ng tin kh√°ch h√†ng t·ª´ DB
            LQV_KhachHang khachHang = khachHangDAO.getById(id);
            if (khachHang == null) {
                System.out.println("‚ùå Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng c√≥ ID: " + id);
                response.getWriter().println("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng!");
                return;
            }

            // Nh·∫≠n th√¥ng tin t·ª´ request
            String taiKhoan = request.getParameter("LQV_tai_khoan");
            String matKhau = request.getParameter("LQV_mat_khau");
            String hoTen = request.getParameter("LQV_ho_ten");
            String email = request.getParameter("LQV_email");
            String diaChi = request.getParameter("LQV_dia_chi");
            String soDienThoai = request.getParameter("LQV_so_dien_thoai");
            boolean trangThai = Boolean.parseBoolean(request.getParameter("LQV_trang_thai"));
            String ngaySuaStr = request.getParameter("LQV_ngay_sua");

            // Debug th√¥ng tin nh·∫≠n ƒë∆∞·ª£c
            System.out.println("üîπ Nh·∫≠n ƒë∆∞·ª£c t·ª´ request:");
            System.out.println("- T√†i kho·∫£n: " + taiKhoan);
            System.out.println("- H·ªç t√™n: " + hoTen);
            System.out.println("- Email: " + email);
            System.out.println("- ƒê·ªãa ch·ªâ: " + diaChi);
            System.out.println("- S·ªë ƒëi·ªán tho·∫°i: " + soDienThoai);
            System.out.println("- Tr·∫°ng th√°i: " + trangThai);
            System.out.println("- Ng√†y s·ª≠a: " + ngaySuaStr);

            // C·∫≠p nh·∫≠t th√¥ng tin
            khachHang.setLQV_tai_khoan(taiKhoan);
            khachHang.setLQV_mat_khau(matKhau);
            khachHang.setLQV_ho_ten(hoTen);
            khachHang.setLQV_email(email);
            khachHang.setLQV_dia_chi(diaChi);
            khachHang.setLQV_so_dien_thoai(soDienThoai);
            khachHang.setLQV_trang_thai(trangThai);

            // X·ª≠ l√Ω ng√†y s·ª≠a
            Date ngaySua;
            if (ngaySuaStr == null || ngaySuaStr.trim().isEmpty()) {
                ngaySua = new Date();
                System.out.println("‚ö† Ng√†y s·ª≠a tr·ªëng, s·ª≠ d·ª•ng ng√†y hi·ªán t·∫°i: " + ngaySua);
            } else {
                try {
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    ngaySua = sdf.parse(ngaySuaStr);
                    System.out.println("‚úÖ Ng√†y s·ª≠a sau khi parse: " + ngaySua);
                } catch (ParseException e) {
                    System.out.println("‚ö† L·ªói khi parse ng√†y s·ª≠a! G√°n ng√†y hi·ªán t·∫°i.");
                    ngaySua = new Date();
                }
            }

            // C·∫≠p nh·∫≠t ng√†y s·ª≠a
            khachHang.setLQV_ngay_sua(ngaySua);

            // Debug tr∆∞·ªõc khi c·∫≠p nh·∫≠t
            System.out.println("=== Debug th√¥ng tin tr∆∞·ªõc khi c·∫≠p nh·∫≠t ===");
            System.out.println(khachHang);

            // C·∫≠p nh·∫≠t v√†o DB
            boolean isUpdated = khachHangDAO.update(khachHang);
            if (isUpdated) {
                System.out.println("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                response.sendRedirect(request.getContextPath() + "/khachhang");
            } else {
                System.out.println("‚ùå C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng!");
                response.getWriter().println("C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("‚ùå L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng: " + e.getMessage());
            response.getWriter().println("L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng: " + e.getMessage());
        }
    }

    private void deleteKhachHang(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        int id = Integer.parseInt(request.getParameter("id"));
        khachHangDAO.delete(id);
        response.sendRedirect("khachhang");
    }
} 